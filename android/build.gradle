group 'org.jerome.pda_scanner'
version '1.0'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        maven {
            allowInsecureProtocol = true
            url 'http://43.254.3.211:8081/nexus/repository/androidRepostory/'
            credentials {
                username 'zxs'
                password 'china@1234'
            }
        }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

rootProject.allprojects {
    repositories {
        maven {
            allowInsecureProtocol = true
            url 'http://43.254.3.211:8081/nexus/repository/androidRepostory/'
            credentials {
                username 'zxs'
                password 'china@1234'
            }
        }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'org.jerome.pda_scanner'
    }

    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 21
    }

    //获取local.properties配置文件
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
    }
    //获取flutter的sdk路径
    def flutterRoot = localProperties.getProperty('flutter.sdk')
    if (flutterRoot == null) {
        throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
    }

    dependencies {
        // 思必拓PDA的扫码插件
        implementation project(':speedata')
//        implementation (name: 'scandecode-release', ext: 'aar')
//        implementation files ('libs/speedata/scandecode-release.aar')
//        implementation fileTree(dir: 'libs/speedata', include: ['*.aar'])

        // 斑马PDA的扫码插件
        implementation files ('libs/zebra/emdk-11.0.129.jar')

        compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
    }


    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
